#!/usr/bin/env ruby
# frozen_string_literal: true
# Runs containerized CI on a base image on DigitalOcean.

REQUIRED_OPTIONS = %i[
  path
  ruby
].freeze

require "dotenv"
Dotenv.load(".env.local", ".env")
$LOAD_PATH.unshift File.expand_path(".", "lib")

# Parse command line options.
#
options = {}
require "optparse"
OptionParser.new { |parser|
  parser.banner = "Usage: example.rb [options]"

  parser.on("-eENVAR", "--env=ENVAR", "Set an envar") do |envar|
    (options[:env] ||= []) << envar
  end

  parser.on("-fFORMATION", "--formation=FORMATION", "Describe the formation") do |formation|
    options[:formation] = formation
  end

  parser.on("-pPATH", "--path=PATH", "Path to upload for testing") do |path|
    options[:path] = path
  end

  parser.on("-rRUBY", "--ruby=RUBY", "Ruby version to use") do |ruby|
    options[:ruby] = ruby
  end

  # TODO: Support this again.
  #
  # parser.on("-sSIZE", "--size=SIZE", "Droplet size (default: s-1vcpu-1gb)") do |size|
  #   options[:size] = size
  # end

  parser.on("-h", "--help", "Prints this help") do
    puts parser
    exit
  end
}.parse!

# Validate command line options.
#
REQUIRED_OPTIONS.each do |required_option|
  fail "#{required_option} is a required argument" unless options.include?(required_option)
end

# Set default values for options.
#
options[:size] ||= "s-1vcpu-1gb"

# Make sure a command was passed.
#
fail "please pass a command to run" if ARGV.empty?

exit_code = 0
require "pakyow/ci/remote/system"
system "commands/generate-key"

begin
  require "securerandom"

  ephemeral_options = {
    name: "pakyow-ci-#{Time.now.to_i}-#{SecureRandom.hex(2)}", image: "pakyow-ci"
  }

  puts "creating ephemeral server: #{ephemeral_options}"
  Pakyow::CI::Remote::System.ephemeral(**ephemeral_options) do |server|
    server.shell do |shell|
      path_to_upload = File.expand_path(options[:path])
      puts "uploading: #{path_to_upload}"
      shell.upload path_to_upload

      if File.extname(path_to_upload) == ".zip"
        shell.run "unzip -q #{File.basename(path_to_upload)}"
        remote_folder = File.basename(path_to_upload, File.extname(path_to_upload))
      else
        remote_folder = File.basename(path_to_upload)
      end

      shell.run "cd #{remote_folder}; docker-compose build --build-arg ruby=#{options[:ruby]}"

      exit_code = if options[:formation]
        shell.run "cd #{remote_folder}; docker-compose up -d #{options[:formation]}" unless options[:formation].empty?
        shell.run "cd #{remote_folder}; docker-compose run --no-deps #{options[:env].to_a.map { |e| "-e #{e}"}.join(" ")} pakyow-ci '#{ARGV.join(" ")}'"
      else
        shell.run "cd #{remote_folder}; docker-compose run #{options[:env].to_a.map { |e| "-e #{e}"}.join(" ")} pakyow-ci '#{ARGV.join(" ")}'"
      end
    end
  end
rescue => error
  puts <<~ERROR
    failed: #{error}
    #{error.backtrace.join("\n")}
  ERROR

  exit_code = 1
end

puts "exiting: #{exit_code}"
exit exit_code
